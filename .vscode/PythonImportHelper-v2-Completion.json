[
    {
        "label": "binary_search",
        "kind": 2,
        "importPath": "Algorithms.Binary_search.examples.binary_search",
        "description": "Algorithms.Binary_search.examples.binary_search",
        "peekOfCode": "def binary_search(arr, target):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        if arr[mid] < target:\n            left = mid + 1\n        else:",
        "detail": "Algorithms.Binary_search.examples.binary_search",
        "documentation": {}
    },
    {
        "label": "my_list",
        "kind": 5,
        "importPath": "Algorithms.Binary_search.examples.binary_search",
        "description": "Algorithms.Binary_search.examples.binary_search",
        "peekOfCode": "my_list = [1, 3, 5, 7, 9, 11, 13, 15]\ntarget = 9\nresult = binary_search(my_list, target)\nif result != -1:\n    print(f\"Элемент {target} найден по индексу {result}.\")\nelse:\n    print(f\"Элемент {target} не найден в списке.\")",
        "detail": "Algorithms.Binary_search.examples.binary_search",
        "documentation": {}
    },
    {
        "label": "target",
        "kind": 5,
        "importPath": "Algorithms.Binary_search.examples.binary_search",
        "description": "Algorithms.Binary_search.examples.binary_search",
        "peekOfCode": "target = 9\nresult = binary_search(my_list, target)\nif result != -1:\n    print(f\"Элемент {target} найден по индексу {result}.\")\nelse:\n    print(f\"Элемент {target} не найден в списке.\")",
        "detail": "Algorithms.Binary_search.examples.binary_search",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Algorithms.Binary_search.examples.binary_search",
        "description": "Algorithms.Binary_search.examples.binary_search",
        "peekOfCode": "result = binary_search(my_list, target)\nif result != -1:\n    print(f\"Элемент {target} найден по индексу {result}.\")\nelse:\n    print(f\"Элемент {target} не найден в списке.\")",
        "detail": "Algorithms.Binary_search.examples.binary_search",
        "documentation": {}
    },
    {
        "label": "find_all_indices",
        "kind": 2,
        "importPath": "Algorithms.Binary_search.examples.find_all_indices",
        "description": "Algorithms.Binary_search.examples.find_all_indices",
        "peekOfCode": "def find_all_indices(arr, target):\n    result = []\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            # Если найдено совпадение, добавляем индекс в список\n            result.append(mid)\n            left_ptr, right_ptr = mid - 1, mid + 1\n            # Проверяем левую половину на наличие дополнительных совпадений",
        "detail": "Algorithms.Binary_search.examples.find_all_indices",
        "documentation": {}
    },
    {
        "label": "my_list",
        "kind": 5,
        "importPath": "Algorithms.Binary_search.examples.find_all_indices",
        "description": "Algorithms.Binary_search.examples.find_all_indices",
        "peekOfCode": "my_list = [1, 2, 2, 3, 4, 4, 4, 5]\ntarget_value = 4\nresult = find_all_indices(my_list, target_value)\nprint(f\"Индексы элемента {target_value} в списке: {result}\")",
        "detail": "Algorithms.Binary_search.examples.find_all_indices",
        "documentation": {}
    },
    {
        "label": "target_value",
        "kind": 5,
        "importPath": "Algorithms.Binary_search.examples.find_all_indices",
        "description": "Algorithms.Binary_search.examples.find_all_indices",
        "peekOfCode": "target_value = 4\nresult = find_all_indices(my_list, target_value)\nprint(f\"Индексы элемента {target_value} в списке: {result}\")",
        "detail": "Algorithms.Binary_search.examples.find_all_indices",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Algorithms.Binary_search.examples.find_all_indices",
        "description": "Algorithms.Binary_search.examples.find_all_indices",
        "peekOfCode": "result = find_all_indices(my_list, target_value)\nprint(f\"Индексы элемента {target_value} в списке: {result}\")",
        "detail": "Algorithms.Binary_search.examples.find_all_indices",
        "documentation": {}
    },
    {
        "label": "find_last_occurrence",
        "kind": 2,
        "importPath": "Algorithms.Binary_search.examples.find_last_occurrence",
        "description": "Algorithms.Binary_search.examples.find_last_occurrence",
        "peekOfCode": "def find_last_occurrence(nums, target):\n    left, right = 0, len(nums) - 1\n    res = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            res = mid\n            left = mid + 1\n        elif nums[mid] < target:\n            left = mid + 1",
        "detail": "Algorithms.Binary_search.examples.find_last_occurrence",
        "documentation": {}
    },
    {
        "label": "sorted_list",
        "kind": 5,
        "importPath": "Algorithms.Binary_search.examples.find_last_occurrence",
        "description": "Algorithms.Binary_search.examples.find_last_occurrence",
        "peekOfCode": "sorted_list = [1, 2, 2, 3, 4, 4, 4, 5, 6, 7, 7, 8, 9, 10]\ntarget_value = 4\nresult = find_last_occurrence(sorted_list, target_value)\nif result != -1:\n    print(f\"Последнее вхождение {target_value} в списке находится по индексу: {result}\")\nelse:\n    print(f\"{target_value} не найдено в списке.\")",
        "detail": "Algorithms.Binary_search.examples.find_last_occurrence",
        "documentation": {}
    },
    {
        "label": "target_value",
        "kind": 5,
        "importPath": "Algorithms.Binary_search.examples.find_last_occurrence",
        "description": "Algorithms.Binary_search.examples.find_last_occurrence",
        "peekOfCode": "target_value = 4\nresult = find_last_occurrence(sorted_list, target_value)\nif result != -1:\n    print(f\"Последнее вхождение {target_value} в списке находится по индексу: {result}\")\nelse:\n    print(f\"{target_value} не найдено в списке.\")",
        "detail": "Algorithms.Binary_search.examples.find_last_occurrence",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Algorithms.Binary_search.examples.find_last_occurrence",
        "description": "Algorithms.Binary_search.examples.find_last_occurrence",
        "peekOfCode": "result = find_last_occurrence(sorted_list, target_value)\nif result != -1:\n    print(f\"Последнее вхождение {target_value} в списке находится по индексу: {result}\")\nelse:\n    print(f\"{target_value} не найдено в списке.\")",
        "detail": "Algorithms.Binary_search.examples.find_last_occurrence",
        "documentation": {}
    },
    {
        "label": "find_rotation_index",
        "kind": 2,
        "importPath": "Algorithms.Binary_search.examples.find_rotation_index",
        "description": "Algorithms.Binary_search.examples.find_rotation_index",
        "peekOfCode": "def find_rotation_index(arr):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        # Если левой границей меньше правой, значит список не вращался, возвращаем -1\n        if arr[left] <= arr[right]:\n            return -1\n        mid = (left + right) // 2\n        # Если средний элемент больше элемента справа от него, то это место вращения\n        if arr[mid] > arr[mid + 1]:",
        "detail": "Algorithms.Binary_search.examples.find_rotation_index",
        "documentation": {}
    },
    {
        "label": "my_list",
        "kind": 5,
        "importPath": "Algorithms.Binary_search.examples.find_rotation_index",
        "description": "Algorithms.Binary_search.examples.find_rotation_index",
        "peekOfCode": "my_list = [6, 1, 2, 3, 4, 5]\nresult = find_rotation_index(my_list)\nif result != -1:\n    print(f\"Список был вращен, начало вращения по индексу {result}.\")\nelse:\n    print(\"Список не был вращен.\")",
        "detail": "Algorithms.Binary_search.examples.find_rotation_index",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Algorithms.Binary_search.examples.find_rotation_index",
        "description": "Algorithms.Binary_search.examples.find_rotation_index",
        "peekOfCode": "result = find_rotation_index(my_list)\nif result != -1:\n    print(f\"Список был вращен, начало вращения по индексу {result}.\")\nelse:\n    print(\"Список не был вращен.\")",
        "detail": "Algorithms.Binary_search.examples.find_rotation_index",
        "documentation": {}
    },
    {
        "label": "binary_search",
        "kind": 2,
        "importPath": "Algorithms.Binary_search.Binary_search",
        "description": "Algorithms.Binary_search.Binary_search",
        "peekOfCode": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif target < arr[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1",
        "detail": "Algorithms.Binary_search.Binary_search",
        "documentation": {}
    },
    {
        "label": "my_list",
        "kind": 5,
        "importPath": "Algorithms.Binary_search.Binary_search",
        "description": "Algorithms.Binary_search.Binary_search",
        "peekOfCode": "my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ntarget_value = 6\nresult = binary_search(my_list, target_value)\nif result != -1:\n    print(f\"Элемент {target_value} найден по индексу {result}.\")\nelse:\n    print(f\"Элемент {target_value} не найден в списке.\")",
        "detail": "Algorithms.Binary_search.Binary_search",
        "documentation": {}
    },
    {
        "label": "target_value",
        "kind": 5,
        "importPath": "Algorithms.Binary_search.Binary_search",
        "description": "Algorithms.Binary_search.Binary_search",
        "peekOfCode": "target_value = 6\nresult = binary_search(my_list, target_value)\nif result != -1:\n    print(f\"Элемент {target_value} найден по индексу {result}.\")\nelse:\n    print(f\"Элемент {target_value} не найден в списке.\")",
        "detail": "Algorithms.Binary_search.Binary_search",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Algorithms.Binary_search.Binary_search",
        "description": "Algorithms.Binary_search.Binary_search",
        "peekOfCode": "result = binary_search(my_list, target_value)\nif result != -1:\n    print(f\"Элемент {target_value} найден по индексу {result}.\")\nelse:\n    print(f\"Элемент {target_value} не найден в списке.\")",
        "detail": "Algorithms.Binary_search.Binary_search",
        "documentation": {}
    },
    {
        "label": "find_minimum",
        "kind": 2,
        "importPath": "Algorithms.Bubble_sort.examples.find_minimum",
        "description": "Algorithms.Bubble_sort.examples.find_minimum",
        "peekOfCode": "def find_minimum(arr):\n    l = len(arr)\n    for i in range(l):\n        for j in range(l - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    return arr[0]\nmy_list = [4, 2, 8, 1, 9, 6]\nresult = find_minimum(my_list)\nprint(f\"Минимальный элемент в списке: {result}\")",
        "detail": "Algorithms.Bubble_sort.examples.find_minimum",
        "documentation": {}
    },
    {
        "label": "my_list",
        "kind": 5,
        "importPath": "Algorithms.Bubble_sort.examples.find_minimum",
        "description": "Algorithms.Bubble_sort.examples.find_minimum",
        "peekOfCode": "my_list = [4, 2, 8, 1, 9, 6]\nresult = find_minimum(my_list)\nprint(f\"Минимальный элемент в списке: {result}\")",
        "detail": "Algorithms.Bubble_sort.examples.find_minimum",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Algorithms.Bubble_sort.examples.find_minimum",
        "description": "Algorithms.Bubble_sort.examples.find_minimum",
        "peekOfCode": "result = find_minimum(my_list)\nprint(f\"Минимальный элемент в списке: {result}\")",
        "detail": "Algorithms.Bubble_sort.examples.find_minimum",
        "documentation": {}
    },
    {
        "label": "is_sorted",
        "kind": 2,
        "importPath": "Algorithms.Bubble_sort.examples.is_sorted",
        "description": "Algorithms.Bubble_sort.examples.is_sorted",
        "peekOfCode": "def is_sorted(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(n - i - 1):\n            if arr[j] > arr[j + 1]:\n                return False\n    return True\nmy_list = [4, 2, 8, 1, 9, 6]\nsorted_list = sorted(my_list)\nif is_sorted(my_list):",
        "detail": "Algorithms.Bubble_sort.examples.is_sorted",
        "documentation": {}
    },
    {
        "label": "my_list",
        "kind": 5,
        "importPath": "Algorithms.Bubble_sort.examples.is_sorted",
        "description": "Algorithms.Bubble_sort.examples.is_sorted",
        "peekOfCode": "my_list = [4, 2, 8, 1, 9, 6]\nsorted_list = sorted(my_list)\nif is_sorted(my_list):\n    print(f\"Список {my_list} отсортирован\")\nelse:\n    print(f\"Список {my_list} не отсортирован\")\nif is_sorted(sorted_list):\n    print(f\"Список {sorted_list} отсортирован\")\nelse:\n    print(f\"Список {sorted_list} не отсортирован\")",
        "detail": "Algorithms.Bubble_sort.examples.is_sorted",
        "documentation": {}
    },
    {
        "label": "sorted_list",
        "kind": 5,
        "importPath": "Algorithms.Bubble_sort.examples.is_sorted",
        "description": "Algorithms.Bubble_sort.examples.is_sorted",
        "peekOfCode": "sorted_list = sorted(my_list)\nif is_sorted(my_list):\n    print(f\"Список {my_list} отсортирован\")\nelse:\n    print(f\"Список {my_list} не отсортирован\")\nif is_sorted(sorted_list):\n    print(f\"Список {sorted_list} отсортирован\")\nelse:\n    print(f\"Список {sorted_list} не отсортирован\")",
        "detail": "Algorithms.Bubble_sort.examples.is_sorted",
        "documentation": {}
    },
    {
        "label": "find_kth_smallest",
        "kind": 2,
        "importPath": "Algorithms.Bubble_sort.examples.remove_duplicates_bubble_sort",
        "description": "Algorithms.Bubble_sort.examples.remove_duplicates_bubble_sort",
        "peekOfCode": "def find_kth_smallest(arr, k):\n    n = len(arr)\n    for i in range(n):\n        for j in range(n - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    return arr[k - 1]\nmy_list = [12, 4, 7, 2, 9, 1, 18, 14]\nk = 3\nresult = find_kth_smallest(my_list, k)",
        "detail": "Algorithms.Bubble_sort.examples.remove_duplicates_bubble_sort",
        "documentation": {}
    },
    {
        "label": "my_list",
        "kind": 5,
        "importPath": "Algorithms.Bubble_sort.examples.remove_duplicates_bubble_sort",
        "description": "Algorithms.Bubble_sort.examples.remove_duplicates_bubble_sort",
        "peekOfCode": "my_list = [12, 4, 7, 2, 9, 1, 18, 14]\nk = 3\nresult = find_kth_smallest(my_list, k)\nprint(f\"{k}-е наименьшее число: {result}\")",
        "detail": "Algorithms.Bubble_sort.examples.remove_duplicates_bubble_sort",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "Algorithms.Bubble_sort.examples.remove_duplicates_bubble_sort",
        "description": "Algorithms.Bubble_sort.examples.remove_duplicates_bubble_sort",
        "peekOfCode": "k = 3\nresult = find_kth_smallest(my_list, k)\nprint(f\"{k}-е наименьшее число: {result}\")",
        "detail": "Algorithms.Bubble_sort.examples.remove_duplicates_bubble_sort",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Algorithms.Bubble_sort.examples.remove_duplicates_bubble_sort",
        "description": "Algorithms.Bubble_sort.examples.remove_duplicates_bubble_sort",
        "peekOfCode": "result = find_kth_smallest(my_list, k)\nprint(f\"{k}-е наименьшее число: {result}\")",
        "detail": "Algorithms.Bubble_sort.examples.remove_duplicates_bubble_sort",
        "documentation": {}
    },
    {
        "label": "bubble_sort",
        "kind": 2,
        "importPath": "Algorithms.Bubble_sort.Bubble_sort",
        "description": "Algorithms.Bubble_sort.Bubble_sort",
        "peekOfCode": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\nmy_list = [64, 34, 25, 12, 22, 11, 90]\nbubble_sort(my_list)\nprint(\"Отсортированный список:\", my_list)",
        "detail": "Algorithms.Bubble_sort.Bubble_sort",
        "documentation": {}
    },
    {
        "label": "my_list",
        "kind": 5,
        "importPath": "Algorithms.Bubble_sort.Bubble_sort",
        "description": "Algorithms.Bubble_sort.Bubble_sort",
        "peekOfCode": "my_list = [64, 34, 25, 12, 22, 11, 90]\nbubble_sort(my_list)\nprint(\"Отсортированный список:\", my_list)",
        "detail": "Algorithms.Bubble_sort.Bubble_sort",
        "documentation": {}
    },
    {
        "label": "count_occurrences",
        "kind": 2,
        "importPath": "Algorithms.Linear_search.examples.count_occurrences",
        "description": "Algorithms.Linear_search.examples.count_occurrences",
        "peekOfCode": "def count_occurrences(arr, target):\n    acc = 0\n    for i in range(len(arr)):\n        if arr[i] == target:\n            acc += 1\n    return acc\n# Пример использования:\nmy_list = [4, 2, 8, 1, 8, 6, 8]\ntarget_value = 8\nresult = count_occurrences(my_list, target_value)",
        "detail": "Algorithms.Linear_search.examples.count_occurrences",
        "documentation": {}
    },
    {
        "label": "my_list",
        "kind": 5,
        "importPath": "Algorithms.Linear_search.examples.count_occurrences",
        "description": "Algorithms.Linear_search.examples.count_occurrences",
        "peekOfCode": "my_list = [4, 2, 8, 1, 8, 6, 8]\ntarget_value = 8\nresult = count_occurrences(my_list, target_value)\nprint(f\"Элемент {target_value} встречается {result} раз.\")",
        "detail": "Algorithms.Linear_search.examples.count_occurrences",
        "documentation": {}
    },
    {
        "label": "target_value",
        "kind": 5,
        "importPath": "Algorithms.Linear_search.examples.count_occurrences",
        "description": "Algorithms.Linear_search.examples.count_occurrences",
        "peekOfCode": "target_value = 8\nresult = count_occurrences(my_list, target_value)\nprint(f\"Элемент {target_value} встречается {result} раз.\")",
        "detail": "Algorithms.Linear_search.examples.count_occurrences",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Algorithms.Linear_search.examples.count_occurrences",
        "description": "Algorithms.Linear_search.examples.count_occurrences",
        "peekOfCode": "result = count_occurrences(my_list, target_value)\nprint(f\"Элемент {target_value} встречается {result} раз.\")",
        "detail": "Algorithms.Linear_search.examples.count_occurrences",
        "documentation": {}
    },
    {
        "label": "find_all_indices",
        "kind": 2,
        "importPath": "Algorithms.Linear_search.examples.find_all_indices",
        "description": "Algorithms.Linear_search.examples.find_all_indices",
        "peekOfCode": "def find_all_indices(arr, target):\n    indeces = []\n    for i in range(len(arr)):\n        if arr[i] == target:\n            indeces.append(i)\n    return indeces\n# Пример использования:\nmy_list = [4, 2, 8, 1, 8, 6, 8, 2]\ntarget_value = 8\nresult = find_all_indices(my_list, target_value)",
        "detail": "Algorithms.Linear_search.examples.find_all_indices",
        "documentation": {}
    },
    {
        "label": "my_list",
        "kind": 5,
        "importPath": "Algorithms.Linear_search.examples.find_all_indices",
        "description": "Algorithms.Linear_search.examples.find_all_indices",
        "peekOfCode": "my_list = [4, 2, 8, 1, 8, 6, 8, 2]\ntarget_value = 8\nresult = find_all_indices(my_list, target_value)\nprint(f\"Индексы элемента {target_value} в списке: {result}\")",
        "detail": "Algorithms.Linear_search.examples.find_all_indices",
        "documentation": {}
    },
    {
        "label": "target_value",
        "kind": 5,
        "importPath": "Algorithms.Linear_search.examples.find_all_indices",
        "description": "Algorithms.Linear_search.examples.find_all_indices",
        "peekOfCode": "target_value = 8\nresult = find_all_indices(my_list, target_value)\nprint(f\"Индексы элемента {target_value} в списке: {result}\")",
        "detail": "Algorithms.Linear_search.examples.find_all_indices",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Algorithms.Linear_search.examples.find_all_indices",
        "description": "Algorithms.Linear_search.examples.find_all_indices",
        "peekOfCode": "result = find_all_indices(my_list, target_value)\nprint(f\"Индексы элемента {target_value} в списке: {result}\")",
        "detail": "Algorithms.Linear_search.examples.find_all_indices",
        "documentation": {}
    },
    {
        "label": "find_second_element_index",
        "kind": 2,
        "importPath": "Algorithms.Linear_search.examples.find_second_element_index",
        "description": "Algorithms.Linear_search.examples.find_second_element_index",
        "peekOfCode": "def find_second_element_index(arr, target):\n    element_count = 0\n    for i in range(len(arr)):\n        if arr[i] == target:\n            if element_count == 0:\n                element_count += 1\n            else:\n                return i\n    return -1\n# Пример 1",
        "detail": "Algorithms.Linear_search.examples.find_second_element_index",
        "documentation": {}
    },
    {
        "label": "my_list",
        "kind": 5,
        "importPath": "Algorithms.Linear_search.examples.find_second_element_index",
        "description": "Algorithms.Linear_search.examples.find_second_element_index",
        "peekOfCode": "my_list = [4, 2, 8, 1, 8, 6, 8, 2]\ntarget_value = 8\nresult = find_second_element_index(my_list, target_value)\nprint(f\"Индекс второго вхождения элемента {target_value} в списке: {result}\")\n# Пример 2\nmy_list = [1, 2, 3, 4, 7, 5, 6]\ntarget_value = 7\nresult = find_second_element_index(my_list, target_value)\nprint(f\"Индекс второго вхождения элемента {target_value} в списке: {result}\")",
        "detail": "Algorithms.Linear_search.examples.find_second_element_index",
        "documentation": {}
    },
    {
        "label": "target_value",
        "kind": 5,
        "importPath": "Algorithms.Linear_search.examples.find_second_element_index",
        "description": "Algorithms.Linear_search.examples.find_second_element_index",
        "peekOfCode": "target_value = 8\nresult = find_second_element_index(my_list, target_value)\nprint(f\"Индекс второго вхождения элемента {target_value} в списке: {result}\")\n# Пример 2\nmy_list = [1, 2, 3, 4, 7, 5, 6]\ntarget_value = 7\nresult = find_second_element_index(my_list, target_value)\nprint(f\"Индекс второго вхождения элемента {target_value} в списке: {result}\")",
        "detail": "Algorithms.Linear_search.examples.find_second_element_index",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Algorithms.Linear_search.examples.find_second_element_index",
        "description": "Algorithms.Linear_search.examples.find_second_element_index",
        "peekOfCode": "result = find_second_element_index(my_list, target_value)\nprint(f\"Индекс второго вхождения элемента {target_value} в списке: {result}\")\n# Пример 2\nmy_list = [1, 2, 3, 4, 7, 5, 6]\ntarget_value = 7\nresult = find_second_element_index(my_list, target_value)\nprint(f\"Индекс второго вхождения элемента {target_value} в списке: {result}\")",
        "detail": "Algorithms.Linear_search.examples.find_second_element_index",
        "documentation": {}
    },
    {
        "label": "my_list",
        "kind": 5,
        "importPath": "Algorithms.Linear_search.examples.find_second_element_index",
        "description": "Algorithms.Linear_search.examples.find_second_element_index",
        "peekOfCode": "my_list = [1, 2, 3, 4, 7, 5, 6]\ntarget_value = 7\nresult = find_second_element_index(my_list, target_value)\nprint(f\"Индекс второго вхождения элемента {target_value} в списке: {result}\")",
        "detail": "Algorithms.Linear_search.examples.find_second_element_index",
        "documentation": {}
    },
    {
        "label": "target_value",
        "kind": 5,
        "importPath": "Algorithms.Linear_search.examples.find_second_element_index",
        "description": "Algorithms.Linear_search.examples.find_second_element_index",
        "peekOfCode": "target_value = 7\nresult = find_second_element_index(my_list, target_value)\nprint(f\"Индекс второго вхождения элемента {target_value} в списке: {result}\")",
        "detail": "Algorithms.Linear_search.examples.find_second_element_index",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Algorithms.Linear_search.examples.find_second_element_index",
        "description": "Algorithms.Linear_search.examples.find_second_element_index",
        "peekOfCode": "result = find_second_element_index(my_list, target_value)\nprint(f\"Индекс второго вхождения элемента {target_value} в списке: {result}\")",
        "detail": "Algorithms.Linear_search.examples.find_second_element_index",
        "documentation": {}
    },
    {
        "label": "linear_search",
        "kind": 2,
        "importPath": "Algorithms.Linear_search.Linear_search",
        "description": "Algorithms.Linear_search.Linear_search",
        "peekOfCode": "def linear_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\n# Пример использования:\nmy_list = [4, 2, 8, 1, 9, 6]\ntarget_value = 8\nresult = linear_search(my_list, target_value)\nif result != -1:",
        "detail": "Algorithms.Linear_search.Linear_search",
        "documentation": {}
    },
    {
        "label": "my_list",
        "kind": 5,
        "importPath": "Algorithms.Linear_search.Linear_search",
        "description": "Algorithms.Linear_search.Linear_search",
        "peekOfCode": "my_list = [4, 2, 8, 1, 9, 6]\ntarget_value = 8\nresult = linear_search(my_list, target_value)\nif result != -1:\n    print(f\"Элемент {target_value} найден по индексу {result}.\")\nelse:\n    print(f\"Элемент {target_value} не найден в списке.\")",
        "detail": "Algorithms.Linear_search.Linear_search",
        "documentation": {}
    },
    {
        "label": "target_value",
        "kind": 5,
        "importPath": "Algorithms.Linear_search.Linear_search",
        "description": "Algorithms.Linear_search.Linear_search",
        "peekOfCode": "target_value = 8\nresult = linear_search(my_list, target_value)\nif result != -1:\n    print(f\"Элемент {target_value} найден по индексу {result}.\")\nelse:\n    print(f\"Элемент {target_value} не найден в списке.\")",
        "detail": "Algorithms.Linear_search.Linear_search",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Algorithms.Linear_search.Linear_search",
        "description": "Algorithms.Linear_search.Linear_search",
        "peekOfCode": "result = linear_search(my_list, target_value)\nif result != -1:\n    print(f\"Элемент {target_value} найден по индексу {result}.\")\nelse:\n    print(f\"Элемент {target_value} не найден в списке.\")",
        "detail": "Algorithms.Linear_search.Linear_search",
        "documentation": {}
    }
]